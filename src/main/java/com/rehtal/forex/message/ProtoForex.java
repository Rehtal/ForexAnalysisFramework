// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: forex.proto

package com.rehtal.forex.message;

public final class ProtoForex {
  private ProtoForex() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code forex.CurrencyPair}
   */
  public enum CurrencyPair
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>EURUSD = 1;</code>
     */
    EURUSD(0, 1),
    ;

    /**
     * <code>EURUSD = 1;</code>
     */
    public static final int EURUSD_VALUE = 1;


    public final int getNumber() { return value; }

    public static CurrencyPair valueOf(int value) {
      switch (value) {
        case 1: return EURUSD;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<CurrencyPair>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<CurrencyPair>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CurrencyPair>() {
            public CurrencyPair findValueByNumber(int number) {
              return CurrencyPair.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.rehtal.forex.message.ProtoForex.getDescriptor().getEnumTypes().get(0);
    }

    private static final CurrencyPair[] VALUES = values();

    public static CurrencyPair valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private CurrencyPair(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:forex.CurrencyPair)
  }

  public interface ForexPriceOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional double open = 1;
    /**
     * <code>optional double open = 1;</code>
     */
    boolean hasOpen();
    /**
     * <code>optional double open = 1;</code>
     */
    double getOpen();

    // optional double high = 2;
    /**
     * <code>optional double high = 2;</code>
     */
    boolean hasHigh();
    /**
     * <code>optional double high = 2;</code>
     */
    double getHigh();

    // optional double low = 3;
    /**
     * <code>optional double low = 3;</code>
     */
    boolean hasLow();
    /**
     * <code>optional double low = 3;</code>
     */
    double getLow();

    // optional double close = 4;
    /**
     * <code>optional double close = 4;</code>
     */
    boolean hasClose();
    /**
     * <code>optional double close = 4;</code>
     */
    double getClose();

    // optional int32 volume = 5;
    /**
     * <code>optional int32 volume = 5;</code>
     */
    boolean hasVolume();
    /**
     * <code>optional int32 volume = 5;</code>
     */
    int getVolume();
  }
  /**
   * Protobuf type {@code forex.ForexPrice}
   */
  public static final class ForexPrice extends
      com.google.protobuf.GeneratedMessage
      implements ForexPriceOrBuilder {
    // Use ForexPrice.newBuilder() to construct.
    private ForexPrice(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ForexPrice(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ForexPrice defaultInstance;
    public static ForexPrice getDefaultInstance() {
      return defaultInstance;
    }

    public ForexPrice getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ForexPrice(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 9: {
              bitField0_ |= 0x00000001;
              open_ = input.readDouble();
              break;
            }
            case 17: {
              bitField0_ |= 0x00000002;
              high_ = input.readDouble();
              break;
            }
            case 25: {
              bitField0_ |= 0x00000004;
              low_ = input.readDouble();
              break;
            }
            case 33: {
              bitField0_ |= 0x00000008;
              close_ = input.readDouble();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              volume_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.rehtal.forex.message.ProtoForex.internal_static_forex_ForexPrice_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.rehtal.forex.message.ProtoForex.internal_static_forex_ForexPrice_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.rehtal.forex.message.ProtoForex.ForexPrice.class, com.rehtal.forex.message.ProtoForex.ForexPrice.Builder.class);
    }

    public static com.google.protobuf.Parser<ForexPrice> PARSER =
        new com.google.protobuf.AbstractParser<ForexPrice>() {
      public ForexPrice parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ForexPrice(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ForexPrice> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional double open = 1;
    public static final int OPEN_FIELD_NUMBER = 1;
    private double open_;
    /**
     * <code>optional double open = 1;</code>
     */
    public boolean hasOpen() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional double open = 1;</code>
     */
    public double getOpen() {
      return open_;
    }

    // optional double high = 2;
    public static final int HIGH_FIELD_NUMBER = 2;
    private double high_;
    /**
     * <code>optional double high = 2;</code>
     */
    public boolean hasHigh() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional double high = 2;</code>
     */
    public double getHigh() {
      return high_;
    }

    // optional double low = 3;
    public static final int LOW_FIELD_NUMBER = 3;
    private double low_;
    /**
     * <code>optional double low = 3;</code>
     */
    public boolean hasLow() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional double low = 3;</code>
     */
    public double getLow() {
      return low_;
    }

    // optional double close = 4;
    public static final int CLOSE_FIELD_NUMBER = 4;
    private double close_;
    /**
     * <code>optional double close = 4;</code>
     */
    public boolean hasClose() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional double close = 4;</code>
     */
    public double getClose() {
      return close_;
    }

    // optional int32 volume = 5;
    public static final int VOLUME_FIELD_NUMBER = 5;
    private int volume_;
    /**
     * <code>optional int32 volume = 5;</code>
     */
    public boolean hasVolume() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 volume = 5;</code>
     */
    public int getVolume() {
      return volume_;
    }

    private void initFields() {
      open_ = 0D;
      high_ = 0D;
      low_ = 0D;
      close_ = 0D;
      volume_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeDouble(1, open_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeDouble(2, high_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeDouble(3, low_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeDouble(4, close_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, volume_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, open_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, high_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, low_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, close_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, volume_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.rehtal.forex.message.ProtoForex.ForexPrice parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.rehtal.forex.message.ProtoForex.ForexPrice parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.rehtal.forex.message.ProtoForex.ForexPrice parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.rehtal.forex.message.ProtoForex.ForexPrice parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.rehtal.forex.message.ProtoForex.ForexPrice parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.rehtal.forex.message.ProtoForex.ForexPrice parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.rehtal.forex.message.ProtoForex.ForexPrice parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.rehtal.forex.message.ProtoForex.ForexPrice parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.rehtal.forex.message.ProtoForex.ForexPrice parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.rehtal.forex.message.ProtoForex.ForexPrice parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.rehtal.forex.message.ProtoForex.ForexPrice prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code forex.ForexPrice}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.rehtal.forex.message.ProtoForex.ForexPriceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.rehtal.forex.message.ProtoForex.internal_static_forex_ForexPrice_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.rehtal.forex.message.ProtoForex.internal_static_forex_ForexPrice_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.rehtal.forex.message.ProtoForex.ForexPrice.class, com.rehtal.forex.message.ProtoForex.ForexPrice.Builder.class);
      }

      // Construct using com.rehtal.forex.message.ProtoForex.ForexPrice.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        open_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000001);
        high_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000002);
        low_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000004);
        close_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000008);
        volume_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.rehtal.forex.message.ProtoForex.internal_static_forex_ForexPrice_descriptor;
      }

      public com.rehtal.forex.message.ProtoForex.ForexPrice getDefaultInstanceForType() {
        return com.rehtal.forex.message.ProtoForex.ForexPrice.getDefaultInstance();
      }

      public com.rehtal.forex.message.ProtoForex.ForexPrice build() {
        com.rehtal.forex.message.ProtoForex.ForexPrice result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.rehtal.forex.message.ProtoForex.ForexPrice buildPartial() {
        com.rehtal.forex.message.ProtoForex.ForexPrice result = new com.rehtal.forex.message.ProtoForex.ForexPrice(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.open_ = open_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.high_ = high_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.low_ = low_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.close_ = close_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.volume_ = volume_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.rehtal.forex.message.ProtoForex.ForexPrice) {
          return mergeFrom((com.rehtal.forex.message.ProtoForex.ForexPrice)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.rehtal.forex.message.ProtoForex.ForexPrice other) {
        if (other == com.rehtal.forex.message.ProtoForex.ForexPrice.getDefaultInstance()) return this;
        if (other.hasOpen()) {
          setOpen(other.getOpen());
        }
        if (other.hasHigh()) {
          setHigh(other.getHigh());
        }
        if (other.hasLow()) {
          setLow(other.getLow());
        }
        if (other.hasClose()) {
          setClose(other.getClose());
        }
        if (other.hasVolume()) {
          setVolume(other.getVolume());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.rehtal.forex.message.ProtoForex.ForexPrice parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.rehtal.forex.message.ProtoForex.ForexPrice) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional double open = 1;
      private double open_ ;
      /**
       * <code>optional double open = 1;</code>
       */
      public boolean hasOpen() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional double open = 1;</code>
       */
      public double getOpen() {
        return open_;
      }
      /**
       * <code>optional double open = 1;</code>
       */
      public Builder setOpen(double value) {
        bitField0_ |= 0x00000001;
        open_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double open = 1;</code>
       */
      public Builder clearOpen() {
        bitField0_ = (bitField0_ & ~0x00000001);
        open_ = 0D;
        onChanged();
        return this;
      }

      // optional double high = 2;
      private double high_ ;
      /**
       * <code>optional double high = 2;</code>
       */
      public boolean hasHigh() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional double high = 2;</code>
       */
      public double getHigh() {
        return high_;
      }
      /**
       * <code>optional double high = 2;</code>
       */
      public Builder setHigh(double value) {
        bitField0_ |= 0x00000002;
        high_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double high = 2;</code>
       */
      public Builder clearHigh() {
        bitField0_ = (bitField0_ & ~0x00000002);
        high_ = 0D;
        onChanged();
        return this;
      }

      // optional double low = 3;
      private double low_ ;
      /**
       * <code>optional double low = 3;</code>
       */
      public boolean hasLow() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional double low = 3;</code>
       */
      public double getLow() {
        return low_;
      }
      /**
       * <code>optional double low = 3;</code>
       */
      public Builder setLow(double value) {
        bitField0_ |= 0x00000004;
        low_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double low = 3;</code>
       */
      public Builder clearLow() {
        bitField0_ = (bitField0_ & ~0x00000004);
        low_ = 0D;
        onChanged();
        return this;
      }

      // optional double close = 4;
      private double close_ ;
      /**
       * <code>optional double close = 4;</code>
       */
      public boolean hasClose() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional double close = 4;</code>
       */
      public double getClose() {
        return close_;
      }
      /**
       * <code>optional double close = 4;</code>
       */
      public Builder setClose(double value) {
        bitField0_ |= 0x00000008;
        close_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double close = 4;</code>
       */
      public Builder clearClose() {
        bitField0_ = (bitField0_ & ~0x00000008);
        close_ = 0D;
        onChanged();
        return this;
      }

      // optional int32 volume = 5;
      private int volume_ ;
      /**
       * <code>optional int32 volume = 5;</code>
       */
      public boolean hasVolume() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 volume = 5;</code>
       */
      public int getVolume() {
        return volume_;
      }
      /**
       * <code>optional int32 volume = 5;</code>
       */
      public Builder setVolume(int value) {
        bitField0_ |= 0x00000010;
        volume_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 volume = 5;</code>
       */
      public Builder clearVolume() {
        bitField0_ = (bitField0_ & ~0x00000010);
        volume_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:forex.ForexPrice)
    }

    static {
      defaultInstance = new ForexPrice(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:forex.ForexPrice)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_forex_ForexPrice_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_forex_ForexPrice_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\013forex.proto\022\005forex\"T\n\nForexPrice\022\014\n\004op" +
      "en\030\001 \001(\001\022\014\n\004high\030\002 \001(\001\022\013\n\003low\030\003 \001(\001\022\r\n\005c" +
      "lose\030\004 \001(\001\022\016\n\006volume\030\005 \001(\005*\032\n\014CurrencyPa" +
      "ir\022\n\n\006EURUSD\020\001B&\n\030com.rehtal.forex.messa" +
      "geB\nProtoForex"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_forex_ForexPrice_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_forex_ForexPrice_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_forex_ForexPrice_descriptor,
              new java.lang.String[] { "Open", "High", "Low", "Close", "Volume", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
